

function bobbingAnimation(marker) {
    // Marker Bobbing Animations
    var marker_displacement = 5;   // Specifies how much the marker moves

    marker.on("click", function() {
        var pos = map.latLngToLayerPoint(marker.getLatLng());
        pos.y -= marker_displacement;
        var fx = new L.PosAnimation();
  
        fx.once('end',function() {
            pos.y += marker_displacement;
            fx.run(marker._icon, pos, 0.8);
            });
        fx.run(marker._icon, pos, 0.3);
    });

    return null;
}

// Marker Variables + Functions shit
var location_icon = L.icon({
    // Define pin icon and attributes
    iconUrl: '../static/assets/loc_icon.png',   // path from HTML file to icon.
    iconSize:     [40, 40],
    iconAnchor:   [20, 37] // point of the icon which will correspond to marker's location
    // popupAnchor:  [-50, -30] // point from which the popup should open relative to the iconAnchor
});

function createPin(xy_pos=[0,0], message="Unnamed Marker", open_popup=false) {
    // Create Pin + Add Animation
    var temp = new L.marker(xy_pos, {
        icon:location_icon, 
        opacity:1.0, 
        alt:message})
        .addTo(map)
        .bindPopup(message);   // Need to remove this in favor of creating popup menu

    bobbingAnimation(temp);
    
    // Create popup on the marker if open_popup = true
    if (open_popup) {
        createPopupMenu(xy_pos);
    }

    return null;
}

function changePinMessage(pin, message="Unnamed Marker") {
    // I need to figure out how to select specific pins that are created.
}

function createPopupMenu(xy_pos=[0,0]) {
    // defines html code for the popup (do I need to initalize this every time?)
    // There has to be a better way to represent this.
    var popupContent = '<h2>Upload an Image</h2>' +
    '<form action="/upload" method="post" enctype="multipart/form-data">'+
    '<input type="file" name="file" accept="image/*">' +
    '<input type="submit" value="Upload">' +
    '</form>';
    
    var popup = L.popup({offset: L.point(0, -10)});
    popup.setLatLng(xy_pos)
        .addTo(map)
        .setContent(popupContent);

    return null;
}

function openPopupmenu(pin) {
    // Need to add an event for on a marker click.
}


// Class

class Pin {
    constructor(xy_pos=[0,0], message="Unnamed Marker", popup_on_creation=false) {

        var location_icon = L.icon({
            // Define pin icon and attributes
            iconUrl: '../static/assets/loc_icon.png',   // path from HTML file to icon.
            iconSize:     [40, 40],
            iconAnchor:   [20, 37] // point of the icon which will correspond to marker's location
            // popupAnchor:  [-50, -30] // point from which the popup should open relative to the iconAnchor
        });

        // Create Pin + Add Animation
        this.marker = new L.marker(xy_pos, {
            icon:location_icon, 
            opacity:1.0, 
            alt:message})
            .addTo(map)
            .bindPopup(message);   // Need to remove this in favor of creating popup menu

        bobbingAnimation(this.marker);
    
        // Create popup on the marker if open_popup = true
        if (open_popup) {
            createPopupMenu(xy_pos);
        }
    }   // create pin and animate it + popup
    
    changePinMessage(pin, message="Unnamed Marker") {
        // I need to figure out how to select specific pins that are created.

        return;
    }   // method to change the pin message (NOT DONE)
        
    createPopupMenu(xy_pos=[0,0]) {
        // defines html code for the popup (do I need to initalize this every time?)
        // There has to be a better way to represent this.
        var popupContent = '<h2>Upload an Image</h2>' +
        '<form action="/upload" method="post" enctype="multipart/form-data">'+
        '<input type="file" name="file" accept="image/*">' +
        '<input type="submit" value="Upload">' +
        '</form>';
            
        var popup = L.popup({offset: L.point(0, -10)});
        popup.setLatLng(xy_pos)
            .addTo(map)
            .setContent(popupContent);
        
        return;
    }   // method to create a new popup window for the marker.
        
    openPopupMenu(marker) {
        // Need to add an event for on a marker click.

        return;
    }   // method to re-open the popup window for the marker.

    bobbingAnimation(marker) {
        // Marker Bobbing Animations
        var marker_displacement = 5;   // Specifies how much the marker moves
    
        marker.on("click", function() {
            var pos = map.latLngToLayerPoint(marker.getLatLng());
            pos.y -= marker_displacement;
            var fx = new L.PosAnimation();
      
            fx.once('end',function() {
                pos.y += marker_displacement;
                fx.run(marker._icon, pos, 0.8);
                });
            fx.run(marker._icon, pos, 0.3);
        });
    
        return;
    }   // method which defines the bobbing animation of the marker.
}











// END END END END END END END END END END END END END

// Marker Animations
myPositionMarker.on("click", function() {
  var pos = map.latLngToLayerPoint(myPositionMarker.getLatLng());
  pos.y -= 5;
  var fx = new L.PosAnimation();

  fx.once('end',function() {
      pos.y += 5;
      fx.run(myPositionMarker._icon, pos, 0.8);
  });
  fx.run(myPositionMarker._icon, pos, 0.3);
});



// Jawg layer testing (ACCESS TOKEN INSIDE)
var MapTile_JawgLagoon = L.tileLayer('https://tile.jawg.io/jawg-lagoon/{z}/{x}/{y}{r}.png?access-token={accessToken}', {
    attribution: '<a href="https://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    minZoom: 0,
    maxZoom: 22,
    accessToken: 'Mk2XMa0mf65s97gaaKZ1Kta6vaoMsp3njJVG5uooQZT9SwflELWRhK5NLpKlA1AN'  // Be careful of this
});
MapTile_JawgLagoon.addTo(map)




// Handles Cursor Events
L.CursorHandler = L.Handler.extend( {
    addHooks: function () {   // Called when handler added to map
        // this._popup = new L.Popup();
        // this._map.on('mouseover', this._open, this);   // Creates Event Listeners for movement in map
        // this._map.on('mousemove', this._update, this);
        // this._map.on('mouseout', this._close, this);
        this._map.on('dblclick', this._addMarker, this);
    },

    removeHooks: function () {   // Called when handler removed from map
        // this._map.off('mouseover', this._open, this);   // Removes Event Listeners
        // this._map.off('mousemove', this._update, this);
        // this._map.off('mouseout', this._close, this);
        this._map.off('dblclick', this._addMarker, this);
    },
    
    _open: function (e) {   // Called when cursor enters map
        this._update(e);
        this._popup.openOn(this._map);
    },

    _close: function () {   // Called when cursor exits map
        this._map.closePopup(this._popup);
    },

    _update: function (e) {
        this._popup.setLatLng(e.latlng)
            .setContent(e.latlng.toString());
    },

    _addMarker: function(e) {
        createPin(e.latlng, "Marker")
    }
});


<form
        enctype="multipart/form-data"
        action="/upload"
        method="post">

    <label for="myfile"> Select a file: </label>

    <input
        type="file"
        name="myfile"
        accept="image/*"
    />
    <br />
    <input type="submit" value="Upload"/>
    </form>